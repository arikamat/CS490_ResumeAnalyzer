name: CI Workflow

on:
  push:
    branches:
      - master   
      - dev  
  pull_request:
    branches:
      - master
      - dev

jobs:
  backend-tests:
    runs-on: ubuntu-latest

    steps:
    # Check out the repository
    - name: Check out code
      uses: actions/checkout@v3

    # Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.12

    # Install dependencies
    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt 

    - name: Download WordNet from NLTK
      run: |
        python -c "import nltk; nltk.download('wordnet'); nltk.download('stopwords')"
        
    # Create the .env file from GitHub secrets
    - name: Create .env file
      run: |
        echo "PRIVATE_PASSWORD=${{ secrets.PRIVATE_PASSWORD }}" >> backend/.env
        echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> backend/.env
        echo "GEMINI_KEY=${{ secrets.GEMINI_KEY }}" >> backend/.env

    # Run backend tests with coverage
    - name: Run backend tests with coverage
      run: |
        pytest --cov=backend --cov-report=term-missing --cov-fail-under=80  # Fail if coverage is below 80%

    # Upload backend code coverage to GitHub
    - name: Upload backend code coverage to GitHub
      uses: codecov/codecov-action@v3
      with:
        file: coverage.xml

  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    # Check out the repository
    - name: Check out code
      uses: actions/checkout@v3

    # Set up Node.js environment
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16

    # Install frontend dependencies
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install

    # Run frontend tests with coverage
    - name: Run frontend tests with coverage
      run: |
        cd frontend
        npx jest --coverage --coverageThreshold '{"global":{"branches":80,"functions":80,"lines":80,"statements":80}}' # Enforce 80% coverage

    # Upload frontend coverage report
    - name: Upload frontend coverage
      uses: actions/upload-artifact@v3
      with:
        name: frontend-coverage
        path: frontend/coverage
  playwright-tests:
    runs-on: ubuntu-latest

    steps:
    # Check out the repository
    - name: Check out code
      uses: actions/checkout@v3

    # Set up Node.js environment
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16

    # Install frontend dependencies
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install
    # Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.12

    # Install dependencies
    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt 

    - name: Download WordNet from NLTK
      run: |
        python -c "import nltk; nltk.download('wordnet'); nltk.download('stopwords')"
        
    # Create the .env file from GitHub secrets
    - name: Create .env file
      run: |
        echo "PRIVATE_PASSWORD=${{ secrets.PRIVATE_PASSWORD }}" >> backend/.env
        echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> backend/.env
        echo "GEMINI_KEY=${{ secrets.GEMINI_KEY }}" >> backend/.env

        
    # # Install Playwright browsers
    # - name: Install Playwright browsers
    #   run: |
    #     cd frontend
    #     npx playwright install chromium firefox webkit

    # Start backend server in background
    - name: Start Backend Server
      run: |
        python -m uvicorn backend.main:app
        # Give the server a moment to start
        sleep 5

    # Start frontend dev server in background
    - name: Start Frontend Dev Server
      run: |
        cd frontend
        npm run dev &
        # Give the server a moment to start
        sleep 5

    # Run Playwright tests
    - name: Run Playwright tests
      run: |
        cd frontend
        npx playwright test